#!/usr/bin/python

import argparse
import os
import sys
from contextlib import AbstractContextManager


class Directory(AbstractContextManager):
    def __init__(self, name: str, parent: "Directory" = None):
        self.name = name
        self.parent = parent

    def __enter__(self):
        self.fd = os.open(
            self.name, os.O_RDONLY, dir_fd=self.parent.dir_fd() if self.parent else None
        )
        return self

    def __exit__(self, exc_type, exc_value, traceback):
        os.close(self.fd)

    def dir_fd(self):
        return self.fd

    def path(self) -> list[str]:
        return (self.parent.path() if self.parent else []) + [self.name]


class Seed:
    def __init__(self, dry_run: bool, verbose: bool, orphan: bool):
        self.dry_run = dry_run
        self.verbose = verbose
        self.orphan = orphan

    def grow(self, parent: Directory) -> list[str]:
        with parent:
            dir_fd = parent.dir_fd()

            branches = []
            leaves = []
            orphans = set()
            for entry in sorted(os.scandir(dir_fd), key=lambda e: e.name):
                name = entry.name
                if entry.is_dir():
                    branches.extend(
                        f"{name}/{item}" for item in self.grow(Directory(name, parent))
                    )
                elif entry.is_file():
                    lower = name.lower()
                    if lower.endswith((".mp3", ".flac", ".aac", ".wav", ".wma")):
                        leaves.append(name)
                    elif lower.endswith(".m3u8"):
                        orphans.add(name)

            path = parent.path()
            if branches:
                name = ".".join([*path, "m3u8"])
                if name in orphans:
                    orphans.remove(name)

                playlist = "\n".join((f"#EXTM3U", "\n".join(branches))) + "\n"

                same = False
                try:
                    with os.fdopen(
                        os.open(name, os.O_RDONLY, dir_fd=dir_fd), "r"
                    ) as file:
                        if file.read() == playlist:
                            same = True
                except OSError:  # FileNotFoundError
                    pass

                if not same:
                    if not self.dry_run:
                        with os.fdopen(
                            os.open(
                                name,
                                os.O_WRONLY | os.O_CREAT | os.O_TRUNC,
                                dir_fd=dir_fd,
                            ),
                            "w",
                        ) as file:
                            file.write(playlist)
                    if self.verbose:
                        print(*path)

            if not self.orphan:
                for orphan in orphans:
                    try:
                        if not self.dry_run:
                            os.remove(orphan, dir_fd=dir_fd)
                        if self.verbose:
                            print("\t", *path, orphan)
                    except FileNotFoundError:
                        pass

            return branches + leaves


def main() -> None:
    parser = argparse.ArgumentParser(
        description="Embed m3u8 playlists into music libraries, specified by their roots."
    )
    parser.add_argument(
        "--dry-run",
        action="store_true",
        help="Simulate playlist creation without changing music libraries.",
    )
    parser.add_argument("-o", "--orphan", action="store_true", help="Keep orphans.")
    parser.add_argument(
        "-v", "--verbose", action="store_true", help="Enable verbose output."
    )
    parser.add_argument(
        "root",
        nargs="*",
        default=["."],
        help="List of roots to music libraries (default is .).",
    )
    args = parser.parse_args()
    seed = Seed(args.dry_run, args.dry_run or args.verbose, args.dry_run or args.orphan)
    for root in args.root:
        seed.grow(Directory(root))


if __name__ == "__main__":
    main()
