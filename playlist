#!/usr/bin/python

import argparse
import os
import sys
from contextlib import AbstractContextManager


class FileDescriptorManager(AbstractContextManager):
    def __init__(self, fd: int):
        self.fd = fd

    def __enter__(self) -> int:
        return self.fd

    def __exit__(self, exc_type, exc_value, traceback):
        os.close(self.fd)


class Seed:
    def __init__(self, change: bool, prune: bool, verbose: bool):
        self.change = change
        self.prune = prune
        self.verbose = verbose
        self.path = []

    def grow(self, name: str, parent: int = None) -> list[str]:
        with FileDescriptorManager(os.open(name, os.O_RDONLY, dir_fd=parent)) as child:
            self.path.append(name)

            branches = []
            leaves = []
            orphans = set()
            for entry in sorted(os.scandir(child), key=lambda e: e.name):
                name = entry.name
                if entry.is_dir():
                    branches.extend(f"{name}/{item}" for item in self.grow(name, child))
                elif entry.is_file():
                    lower = name.lower()
                    if lower.endswith((".mp3", ".flac", ".aac", ".wav", ".wma")):
                        leaves.append(name)
                    elif lower.endswith(".m3u8"):
                        orphans.add(name)

            if branches:
                name = ".".join([*self.path, "m3u8"])
                if name in orphans:
                    orphans.remove(name)

                playlist = "\n".join((f"#EXTM3U", "\n".join(branches))) + "\n"

                same = False
                try:
                    with os.fdopen(
                        os.open(name, os.O_RDONLY, dir_fd=child), "r"
                    ) as file:
                        same = file.read() == playlist
                except OSError:  # FileNotFoundError
                    pass

                if not same:
                    if self.change:
                        with os.fdopen(
                            os.open(
                                name,
                                os.O_WRONLY | os.O_CREAT | os.O_TRUNC,
                                dir_fd=child,
                            ),
                            "w",
                        ) as file:
                            file.write(playlist)
                    if self.verbose:
                        print(*self.path)

            if self.prune:
                for orphan in orphans:
                    if self.change:
                        os.remove(orphan, dir_fd=child)
                    if self.verbose:
                        print("\t", *self.path, orphan)

            self.path.pop()
            return branches + leaves


def main() -> None:
    parser = argparse.ArgumentParser(
        description="Embed m3u8 playlists into music libraries, specified by their roots."
    )
    parser.add_argument("--dry-run", action="store_true", help="change nothing")
    parser.add_argument("-k", "--keep", action="store_true", help="keep orphans")
    parser.add_argument("-v", "--verbose", action="store_true", help="verbose output")
    parser.add_argument("root", nargs="*", default=["."], help="root directory")
    args = parser.parse_args()
    seed = Seed(not args.dry_run, not args.keep, args.dry_run or args.verbose)
    for root in args.root:
        if os.path.isdir(root):
            seed.grow(root)
        else:
            sys.stderr.write(f"{root}: no such root directory\n")
            parser.print_help(sys.stderr)
            sys.exit(1)


if __name__ == "__main__":
    main()
