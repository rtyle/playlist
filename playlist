#!/usr/bin/python

import argparse
import os
import sys
from contextlib import AbstractContextManager


class DirectoryContext(AbstractContextManager):
    def __init__(self, path: list[str], name: str, parent: int):
        self.path = path
        self.name = name
        self.parent = parent

    def os_path(self):
        return "." if not self.path else os.path.join(*self.path)

    def __enter__(self) -> int:
        try:
            self.child = os.open(self.name, os.O_RDONLY, dir_fd=self.parent)
        except PermissionError as e:
            sys.stderr.write(f"{e}: scan from {self.os_path()}\n")
            raise
        self.path.append(self.name)
        return self.child

    def __exit__(self, exc_type, exc_value, traceback):
        self.path.pop()
        os.close(self.child)


class Seed:
    def __init__(self, change: bool, prune: bool, verbose: bool):
        self.change = change
        self.prune = prune
        self.verbose = verbose

    def grow(self, path: list[str], name: str, parent: int = None) -> list[str]:
        try:
            dc = DirectoryContext(path, name, parent)
            with dc as child:

                branches = []
                leaves = []
                orphans = set()
                for entry in sorted(os.scandir(child), key=lambda e: e.name):
                    name = entry.name
                    if entry.is_dir():
                        branches.extend(
                            f"{name}/{item}" for item in self.grow(path, name, child)
                        )
                    elif entry.is_file():
                        lower = name.lower()
                        if lower.endswith((".mp3", ".flac", ".aac", ".wav", ".wma")):
                            leaves.append(name)
                        elif lower.endswith(".m3u8"):
                            orphans.add(name)

                if branches:
                    name = ".".join([*path, "m3u8"])
                    if name in orphans:
                        orphans.remove(name)

                    playlist = "\n".join((f"#EXTM3U", "\n".join(branches))) + "\n"

                    same = False
                    try:
                        with os.fdopen(
                            os.open(name, os.O_RDONLY, dir_fd=child),
                            "r",
                            encoding="utf-8",
                        ) as file:
                            same = file.read() == playlist
                    except FileNotFoundError:
                        pass
                    except PermissionError as e:
                        sys.stderr.write(f"{e}: read from {dc.os_path()}\n")

                    if not same:
                        if self.verbose:
                            print(*path)
                        if self.change:
                            try:
                                with os.fdopen(
                                    os.open(
                                        name,
                                        os.O_WRONLY | os.O_CREAT | os.O_TRUNC,
                                        dir_fd=child,
                                    ),
                                    "w",
                                    encoding="utf-8",
                                ) as file:
                                    file.write(playlist)
                            except PermissionError as e:
                                sys.stderr.write(f"{e}: write from {dc.os_path()}\n")

                if self.prune:
                    for orphan in orphans:
                        if self.verbose:
                            print("\t", *path, orphan)
                        if self.change:
                            try:
                                os.remove(orphan, dir_fd=child)
                            except PermissionError as e:
                                sys.stderr.write(f"{e}: remove from {dc.os_path()}\n")

                return branches + leaves

        except PermissionError:
            return []


def main() -> None:
    parser = argparse.ArgumentParser(
        description="Embed m3u8 playlists into music libraries, specified by their roots."
    )
    parser.add_argument("--dry-run", action="store_true", help="change nothing")
    parser.add_argument("-k", "--keep", action="store_true", help="keep orphans")
    parser.add_argument("-v", "--verbose", action="store_true", help="verbose output")
    parser.add_argument("root", nargs="*", default=["."], help="root directory")
    args = parser.parse_args()
    seed = Seed(not args.dry_run, not args.keep, args.dry_run or args.verbose)
    for root in args.root:
        if os.path.isdir(root):
            seed.grow([], root)
        else:
            sys.stderr.write(f"{root}: no such root directory\n")
            parser.print_help(sys.stderr)
            sys.exit(1)


if __name__ == "__main__":
    main()
